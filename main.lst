CCS PCM C Compiler, Version 5.015, 5967               07-Apr-16 13:04

               Filename:   D:\pic\project\day1\main.lst

               ROM used:   1792 words (22%)
                           Largest free fragment is 2048
               RAM used:   21 (6%) at main() level
                           42 (11%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  06
0001:  MOVWF  0A
0002:  GOTO   649
0003:  NOP
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  3F
0009:  RETLW  06
000A:  RETLW  5B
000B:  RETLW  4F
000C:  RETLW  66
000D:  RETLW  6D
000E:  RETLW  7D
000F:  RETLW  07
0010:  RETLW  7F
0011:  RETLW  6F
0012:  RETLW  BF
0013:  RETLW  86
0014:  RETLW  DB
0015:  RETLW  CF
0016:  RETLW  E6
0017:  RETLW  ED
0018:  RETLW  FD
0019:  RETLW  87
001A:  RETLW  FF
001B:  RETLW  EF
001C:  RETLW  39
001D:  RETLW  63
001E:  RETLW  00
*
0097:  CLRF   77
0098:  CLRF   78
0099:  MOVF   40,W
009A:  BCF    03.0
009B:  BTFSC  41.0
009C:  ADDWF  77,F
009D:  RRF    77,F
009E:  RRF    78,F
009F:  BTFSC  41.1
00A0:  ADDWF  77,F
00A1:  RRF    77,F
00A2:  RRF    78,F
00A3:  BTFSC  41.2
00A4:  ADDWF  77,F
00A5:  RRF    77,F
00A6:  RRF    78,F
00A7:  BTFSC  41.3
00A8:  ADDWF  77,F
00A9:  RRF    77,F
00AA:  RRF    78,F
00AB:  BTFSC  41.4
00AC:  ADDWF  77,F
00AD:  RRF    77,F
00AE:  RRF    78,F
00AF:  BTFSC  41.5
00B0:  ADDWF  77,F
00B1:  RRF    77,F
00B2:  RRF    78,F
00B3:  BTFSC  41.6
00B4:  ADDWF  77,F
00B5:  RRF    77,F
00B6:  RRF    78,F
00B7:  BTFSC  41.7
00B8:  ADDWF  77,F
00B9:  RRF    77,F
00BA:  RRF    78,F
00BB:  RETURN
*
00D0:  MOVF   41,W
00D1:  ANDLW  07
00D2:  MOVWF  77
00D3:  RRF    41,W
00D4:  MOVWF  78
00D5:  RRF    78,F
00D6:  RRF    78,F
00D7:  MOVLW  1F
00D8:  ANDWF  78,F
00D9:  MOVF   78,W
00DA:  ADDWF  43,W
00DB:  MOVWF  04
00DC:  BCF    03.7
00DD:  BTFSC  44.0
00DE:  BSF    03.7
00DF:  CLRF   78
00E0:  INCF   78,F
00E1:  INCF   77,F
00E2:  GOTO   0E4
00E3:  RLF    78,F
00E4:  DECFSZ 77,F
00E5:  GOTO   0E3
00E6:  MOVF   42,F
00E7:  BTFSC  03.2
00E8:  GOTO   0EC
00E9:  MOVF   78,W
00EA:  IORWF  00,F
00EB:  GOTO   0EF
00EC:  COMF   78,F
00ED:  MOVF   78,W
00EE:  ANDWF  00,F
00EF:  RETURN
*
015B:  MOVF   41,W
015C:  CLRF   78
015D:  SUBWF  40,W
015E:  BTFSC  03.0
015F:  GOTO   163
0160:  MOVF   40,W
0161:  MOVWF  77
0162:  GOTO   16F
0163:  CLRF   77
0164:  MOVLW  08
0165:  MOVWF  42
0166:  RLF    40,F
0167:  RLF    77,F
0168:  MOVF   41,W
0169:  SUBWF  77,W
016A:  BTFSC  03.0
016B:  MOVWF  77
016C:  RLF    78,F
016D:  DECFSZ 42,F
016E:  GOTO   166
016F:  RETURN
*
0269:  BCF    0A.0
026A:  BSF    0A.1
026B:  BCF    0A.2
026C:  ADDWF  02,F
026D:  GOTO   226
026E:  GOTO   22D
026F:  GOTO   234
0270:  GOTO   23B
0271:  BCF    0A.0
0272:  BSF    0A.1
0273:  BCF    0A.2
0274:  ADDWF  02,F
0275:  GOTO   249
0276:  GOTO   250
0277:  GOTO   257
0278:  GOTO   25E
*
0393:  BSF    0A.0
0394:  BSF    0A.1
0395:  BCF    0A.2
0396:  ADDWF  02,F
0397:  GOTO   309
0398:  GOTO   306
0399:  GOTO   30F
039A:  GOTO   303
039B:  GOTO   2AC
039C:  GOTO   2A9
039D:  GOTO   2A6
*
0633:  BCF    0A.0
0634:  BSF    0A.1
0635:  BSF    0A.2
0636:  ADDWF  02,F
0637:  GOTO   5D1
0638:  GOTO   5D9
0639:  GOTO   5E0
063A:  GOTO   5E1
063B:  GOTO   5E8
063C:  GOTO   5EF
063D:  GOTO   5F6
063E:  BCF    0A.0
063F:  BSF    0A.1
0640:  BSF    0A.2
0641:  ADDWF  02,F
0642:  GOTO   603
0643:  GOTO   60B
0644:  GOTO   612
0645:  GOTO   613
0646:  GOTO   61A
0647:  GOTO   621
0648:  GOTO   628
....................  
.................... #list 
....................  
.................... #device ADC=8 
.................... #FUSES HS 
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=8000000) 
*
010A:  MOVLW  41
010B:  MOVWF  04
010C:  BCF    03.7
010D:  MOVF   00,W
010E:  BTFSC  03.2
010F:  GOTO   11D
0110:  MOVLW  02
0111:  MOVWF  78
0112:  CLRF   77
0113:  DECFSZ 77,F
0114:  GOTO   113
0115:  DECFSZ 78,F
0116:  GOTO   112
0117:  MOVLW  97
0118:  MOVWF  77
0119:  DECFSZ 77,F
011A:  GOTO   119
011B:  DECFSZ 00,F
011C:  GOTO   110
*
039E:  MOVLW  08
039F:  SUBWF  38,F
03A0:  BTFSS  03.0
03A1:  GOTO   3AE
03A2:  MOVLW  38
03A3:  MOVWF  04
03A4:  BCF    03.7
03A5:  BCF    03.0
03A6:  RRF    00,F
03A7:  MOVF   00,W
03A8:  BTFSC  03.2
03A9:  GOTO   3AE
03AA:  GOTO   3AC
03AB:  NOP
03AC:  DECFSZ 00,F
03AD:  GOTO   3AB
03AE:  RETURN
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #byte portb=0x06 
.................... #byte trisb=0x86 
.................... #byte ANSEL=0x188 
.................... #byte ANSELH=0x189 
.................... #bit trisb0=trisb.0 
.................... #bit trisb4=trisb.4 
.................... #bit trisb5=trisb.5 
....................  
.................... //#include <lcd.c> 
.................... #include <ds1302.c> 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////                               DS1302.C                           //// 
.................... ////                     Driver for Real Time Clock                   //// 
.................... ////                                                                  //// 
.................... ////  rtc_init()                                   Call after power up//// 
.................... ////                                                                  //// 
.................... ////  rtc_set_datetime(day,mth,year,dow,hour,min)  Set the date/time  //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_date(day,mth,year,dow)               Get the date       //// 
.................... ////                                                                  //// 
.................... ////  rtc_get_time(hr,min,sec)                     Get the time       //// 
.................... ////                                                                  //// 
.................... ////  rtc_write_nvr(address,data)                  Write to NVR       //// 
.................... ////                                                                  //// 
.................... ////  data = rtc_read_nvr(address)                 Read from NVR      //// 
.................... ////                                                                  //// 
.................... ////  get_bcd(data)                              Convert data to BCD  //// 
.................... ////                                                                  //// 
.................... ////  rm_bcd(data)                               Convert data to int  //// 
.................... ////                                                                  //// 
.................... ////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C //// 
.................... //// compiler.  This source code may only be distributed to other     //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction//// 
.................... //// or distribution is permitted without written permission.         //// 
.................... //// Derivative programs created using this software in object code   //// 
.................... //// form are not restricted in any way.                              //// 
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef RTC_SCLK 
....................  
.................... #define RTC_SCLK PIN_B1 
.................... #define RTC_IO   PIN_B3 
.................... #define RTC_RST  PIN_B2 
....................  
.................... #endif 
....................  
.................... void write_ds1302_byte(unsigned int8 cmd) { 
....................    unsigned int8 i; 
....................  
....................    for(i=0;i<=7;++i) { 
*
001F:  CLRF   41
0020:  MOVF   41,W
0021:  SUBLW  07
0022:  BTFSS  03.0
0023:  GOTO   036
....................       output_bit(RTC_IO, shift_right(&cmd,1,0) ); 
0024:  BCF    03.0
0025:  RRF    40,F
0026:  BTFSC  03.0
0027:  GOTO   02A
0028:  BCF    06.3
0029:  GOTO   02B
002A:  BSF    06.3
002B:  BSF    03.5
002C:  BCF    06.3
....................       output_high(RTC_SCLK); 
002D:  BCF    06.1
002E:  BCF    03.5
002F:  BSF    06.1
....................       output_low(RTC_SCLK); 
0030:  BSF    03.5
0031:  BCF    06.1
0032:  BCF    03.5
0033:  BCF    06.1
0034:  INCF   41,F
0035:  GOTO   020
....................    } 
0036:  RETURN
.................... } 
....................  
.................... void write_ds1302(unsigned int8 cmd, unsigned int8 data) { 
....................  
....................    output_high(RTC_RST); 
0037:  BSF    03.5
0038:  BCF    06.2
0039:  BCF    03.5
003A:  BSF    06.2
....................    write_ds1302_byte(cmd); 
003B:  MOVF   3E,W
003C:  MOVWF  40
003D:  CALL   01F
....................    write_ds1302_byte(data); 
003E:  MOVF   3F,W
003F:  MOVWF  40
0040:  CALL   01F
....................    output_low(RTC_RST); 
0041:  BSF    03.5
0042:  BCF    06.2
0043:  BCF    03.5
0044:  BCF    06.2
0045:  RETURN
.................... } 
....................  
.................... unsigned int8 read_ds1302(unsigned int8 cmd) { 
....................    unsigned int8 i,data; 
....................  
....................    output_high(RTC_RST); 
0046:  BSF    03.5
0047:  BCF    06.2
0048:  BCF    03.5
0049:  BSF    06.2
....................    write_ds1302_byte(cmd); 
004A:  MOVF   34,W
004B:  MOVWF  40
004C:  CALL   01F
....................     
....................    input(RTC_IO); 
004D:  BSF    03.5
004E:  BSF    06.3
....................    delay_us(1); 
004F:  GOTO   050
....................           
....................    for(i=0;i<=7;++i) { 
0050:  BCF    03.5
0051:  CLRF   35
0052:  MOVF   35,W
0053:  SUBLW  07
0054:  BTFSS  03.0
0055:  GOTO   06D
....................       shift_right(&data,1,input(RTC_IO)); 
0056:  BSF    03.5
0057:  BSF    06.3
0058:  BCF    03.5
0059:  BTFSC  06.3
005A:  GOTO   05D
005B:  BCF    03.0
005C:  GOTO   05E
005D:  BSF    03.0
005E:  RRF    36,F
....................       output_high(RTC_SCLK); 
005F:  BSF    03.5
0060:  BCF    06.1
0061:  BCF    03.5
0062:  BSF    06.1
....................       delay_us(2); 
0063:  GOTO   064
0064:  GOTO   065
....................       output_low(RTC_SCLK); 
0065:  BSF    03.5
0066:  BCF    06.1
0067:  BCF    03.5
0068:  BCF    06.1
....................       delay_us(2); 
0069:  GOTO   06A
006A:  GOTO   06B
006B:  INCF   35,F
006C:  GOTO   052
....................    } 
....................    output_low(RTC_RST); 
006D:  BSF    03.5
006E:  BCF    06.2
006F:  BCF    03.5
0070:  BCF    06.2
....................  
....................    return(data); 
0071:  MOVF   36,W
0072:  MOVWF  78
0073:  RETURN
.................... } 
....................  
.................... void rtc_init() { 
....................    unsigned int8 x; 
....................    output_low(RTC_RST); 
0074:  BSF    03.5
0075:  BCF    06.2
0076:  BCF    03.5
0077:  BCF    06.2
....................    delay_us(2); 
0078:  GOTO   079
0079:  GOTO   07A
....................    output_low(RTC_SCLK); 
007A:  BSF    03.5
007B:  BCF    06.1
007C:  BCF    03.5
007D:  BCF    06.1
....................    write_ds1302(0x8e,0); 
007E:  MOVLW  8E
007F:  MOVWF  3E
0080:  CLRF   3F
0081:  CALL   037
....................    write_ds1302(0x90,0xa4); 
0082:  MOVLW  90
0083:  MOVWF  3E
0084:  MOVLW  A4
0085:  MOVWF  3F
0086:  CALL   037
....................    x=read_ds1302(0x81); 
0087:  MOVLW  81
0088:  MOVWF  34
0089:  CALL   046
008A:  MOVF   78,W
008B:  MOVWF  30
....................    if((x & 0x80)!=0) 
008C:  MOVF   30,W
008D:  ANDLW  80
008E:  BTFSC  03.2
008F:  GOTO   094
....................      write_ds1302(0x80,0); 
0090:  MOVLW  80
0091:  MOVWF  3E
0092:  CLRF   3F
0093:  CALL   037
0094:  BCF    0A.3
0095:  BCF    0A.4
0096:  GOTO   6A5 (RETURN)
.................... } 
....................  
.................... unsigned int8 get_bcd(unsigned int8 data) 
.................... { 
....................    unsigned int8 nibh; 
....................    unsigned int8 nibl; 
....................  
....................    nibh=data/10; 
*
0170:  MOVF   3D,W
0171:  MOVWF  40
0172:  MOVLW  0A
0173:  MOVWF  41
0174:  CALL   15B
0175:  MOVF   78,W
0176:  MOVWF  3E
....................    nibl=data-(nibh*10); 
0177:  MOVF   3E,W
0178:  MOVWF  40
0179:  MOVLW  0A
017A:  MOVWF  41
017B:  CALL   097
017C:  MOVF   78,W
017D:  SUBWF  3D,W
017E:  MOVWF  3F
....................  
....................    return((nibh<<4)|nibl); 
017F:  SWAPF  3E,W
0180:  MOVWF  77
0181:  MOVLW  F0
0182:  ANDWF  77,F
0183:  MOVF   77,W
0184:  IORWF  3F,W
0185:  MOVWF  78
0186:  RETURN
.................... } 
....................                                           
.................... unsigned int8 rm_bcd(unsigned int8 data) 
.................... {                                                          
....................    unsigned int8 i;                 
....................  
....................    i=data;                      
*
00BC:  MOVF   35,W
00BD:  MOVWF  36
....................    data=(i>>4)*10; 
00BE:  SWAPF  36,W
00BF:  MOVWF  77
00C0:  MOVLW  0F
00C1:  ANDWF  77,F
00C2:  MOVF   77,W
00C3:  MOVWF  38
00C4:  MOVWF  40
00C5:  MOVLW  0A
00C6:  MOVWF  41
00C7:  CALL   097
00C8:  MOVF   78,W
00C9:  MOVWF  35
....................    data=data+(i & 0x0F);        
00CA:  MOVF   36,W
00CB:  ANDLW  0F
00CC:  ADDWF  35,F
....................  
....................    return data; 
00CD:  MOVF   35,W
00CE:  MOVWF  78
00CF:  RETURN
.................... } 
....................  
.................... void rtc_set_datetime(unsigned int8 day, unsigned int8 mth, unsigned int8 year, unsigned int8 dow, unsigned int8 hr, unsigned int8 min) { 
....................  
....................    write_ds1302(0x86,get_bcd(day)); 
*
02B9:  MOVF   37,W
02BA:  MOVWF  3D
02BB:  CALL   170
02BC:  MOVF   78,W
02BD:  MOVWF  3D
02BE:  MOVLW  86
02BF:  MOVWF  3E
02C0:  MOVF   78,W
02C1:  MOVWF  3F
02C2:  CALL   037
....................    write_ds1302(0x88,get_bcd(mth)); 
02C3:  MOVF   38,W
02C4:  MOVWF  3D
02C5:  CALL   170
02C6:  MOVF   78,W
02C7:  MOVWF  3D
02C8:  MOVLW  88
02C9:  MOVWF  3E
02CA:  MOVF   78,W
02CB:  MOVWF  3F
02CC:  CALL   037
....................    write_ds1302(0x8c,get_bcd(year)); 
02CD:  MOVF   39,W
02CE:  MOVWF  3D
02CF:  CALL   170
02D0:  MOVF   78,W
02D1:  MOVWF  3D
02D2:  MOVLW  8C
02D3:  MOVWF  3E
02D4:  MOVF   78,W
02D5:  MOVWF  3F
02D6:  CALL   037
....................    write_ds1302(0x8a,get_bcd(dow)); 
02D7:  MOVF   3A,W
02D8:  MOVWF  3D
02D9:  CALL   170
02DA:  MOVF   78,W
02DB:  MOVWF  3D
02DC:  MOVLW  8A
02DD:  MOVWF  3E
02DE:  MOVF   78,W
02DF:  MOVWF  3F
02E0:  CALL   037
....................    write_ds1302(0x84,get_bcd(hr)); 
02E1:  MOVF   3B,W
02E2:  MOVWF  3D
02E3:  CALL   170
02E4:  MOVF   78,W
02E5:  MOVWF  3D
02E6:  MOVLW  84
02E7:  MOVWF  3E
02E8:  MOVF   78,W
02E9:  MOVWF  3F
02EA:  CALL   037
....................    write_ds1302(0x82,get_bcd(min)); 
02EB:  MOVF   3C,W
02EC:  MOVWF  3D
02ED:  CALL   170
02EE:  MOVF   78,W
02EF:  MOVWF  3D
02F0:  MOVLW  82
02F1:  MOVWF  3E
02F2:  MOVF   78,W
02F3:  MOVWF  3F
02F4:  CALL   037
....................    write_ds1302(0x80,get_bcd(0)); 
02F5:  CLRF   3D
02F6:  CALL   170
02F7:  MOVF   78,W
02F8:  MOVWF  3D
02F9:  MOVLW  80
02FA:  MOVWF  3E
02FB:  MOVF   78,W
02FC:  MOVWF  3F
02FD:  CALL   037
.................... }                                       
....................  
.................... void rtc_get_date(unsigned int8 &day, unsigned int8 &mth, unsigned int8 &year, unsigned int8 &dow) { 
....................    day = rm_bcd(read_ds1302(0x87)); 
*
06C0:  MOVLW  87
06C1:  MOVWF  34
06C2:  CALL   046
06C3:  MOVF   78,W
06C4:  MOVWF  30
06C5:  MOVWF  35
06C6:  CALL   0BC
06C7:  MOVF   78,W
06C8:  MOVWF  29
....................    mth = rm_bcd(read_ds1302(0x89)); 
06C9:  MOVLW  89
06CA:  MOVWF  34
06CB:  CALL   046
06CC:  MOVF   78,W
06CD:  MOVWF  30
06CE:  MOVWF  35
06CF:  CALL   0BC
06D0:  MOVF   78,W
06D1:  MOVWF  2A
....................    year = rm_bcd(read_ds1302(0x8d)); 
06D2:  MOVLW  8D
06D3:  MOVWF  34
06D4:  CALL   046
06D5:  MOVF   78,W
06D6:  MOVWF  30
06D7:  MOVWF  35
06D8:  CALL   0BC
06D9:  MOVF   78,W
06DA:  MOVWF  2B
....................    dow = rm_bcd(read_ds1302(0x8b)); 
06DB:  MOVLW  8B
06DC:  MOVWF  34
06DD:  CALL   046
06DE:  MOVF   78,W
06DF:  MOVWF  30
06E0:  MOVWF  35
06E1:  CALL   0BC
06E2:  MOVF   78,W
06E3:  MOVWF  2C
.................... } 
....................  
.................... void rtc_get_time(unsigned int8 &hr, unsigned int8 &min, unsigned int8 &sec) { 
....................    hr = rm_bcd(read_ds1302(0x85)); 
*
047F:  MOVLW  85
0480:  MOVWF  34
0481:  CALL   046
0482:  MOVF   78,W
0483:  MOVWF  31
0484:  MOVWF  35
0485:  CALL   0BC
0486:  MOVF   78,W
0487:  MOVWF  24
*
06A5:  MOVLW  85
06A6:  MOVWF  34
06A7:  CALL   046
06A8:  MOVF   78,W
06A9:  MOVWF  31
06AA:  MOVWF  35
06AB:  CALL   0BC
06AC:  MOVF   78,W
06AD:  MOVWF  24
....................    min = rm_bcd(read_ds1302(0x83)); 
*
0488:  MOVLW  83
0489:  MOVWF  34
048A:  CALL   046
048B:  MOVF   78,W
048C:  MOVWF  31
048D:  MOVWF  35
048E:  CALL   0BC
048F:  MOVF   78,W
0490:  MOVWF  25
*
06AE:  MOVLW  83
06AF:  MOVWF  34
06B0:  CALL   046
06B1:  MOVF   78,W
06B2:  MOVWF  31
06B3:  MOVWF  35
06B4:  CALL   0BC
06B5:  MOVF   78,W
06B6:  MOVWF  25
....................    sec = rm_bcd(read_ds1302(0x81)); 
*
0491:  MOVLW  81
0492:  MOVWF  34
0493:  CALL   046
0494:  MOVF   78,W
0495:  MOVWF  31
0496:  MOVWF  35
0497:  CALL   0BC
0498:  MOVF   78,W
0499:  MOVWF  26
*
06B7:  MOVLW  81
06B8:  MOVWF  34
06B9:  CALL   046
06BA:  MOVF   78,W
06BB:  MOVWF  31
06BC:  MOVWF  35
06BD:  CALL   0BC
06BE:  MOVF   78,W
06BF:  MOVWF  26
.................... } 
....................  
.................... void rtc_write_nvr(unsigned int8 address, unsigned int8 data) { 
....................    write_ds1302(address|0xc0,data); 
.................... } 
....................  
.................... unsigned int8 rtc_read_nvr(unsigned int8 address) { 
....................     return(read_ds1302(address|0xc1)); 
.................... } 
....................  
.................... #include <ds18b20.c> 
.................... #ifndef DS18B20_C 
.................... #define DS18B20_C 
.................... #include "1_day.c" 
.................... #ifndef ONE_WIRE_C 
.................... #define ONE_WIRE_C 
....................  
.................... /* 
....................  * One wire (1-wire) driver for CCS C compiler. Suitable for use with devices 
....................  * such as the DS18B20 1-wire digital temperature sensor. 
....................  */ 
.................... #define ONE_WIRE_PIN PIN_C1 
....................  
.................... /* 
....................  * onewire_reset() 
....................  * Description: Initiates the one wire bus. 
....................  */ 
.................... // OK if just using a single permanently connected device 
.................... void onewire_reset() { 
....................     output_low(ONE_WIRE_PIN);       // pull the bus low for reset 
*
03AF:  BCF    20.1
03B0:  MOVF   20,W
03B1:  BSF    03.5
03B2:  MOVWF  07
03B3:  BCF    03.5
03B4:  BCF    07.1
....................     delay_us(500); 
03B5:  MOVLW  02
03B6:  MOVWF  37
03B7:  MOVLW  F8
03B8:  MOVWF  38
03B9:  CALL   39E
03BA:  DECFSZ 37,F
03BB:  GOTO   3B7
....................     output_float(ONE_WIRE_PIN);     // float the bus high 
03BC:  BSF    20.1
03BD:  MOVF   20,W
03BE:  BSF    03.5
03BF:  MOVWF  07
....................     delay_us(500);                  // wait-out remaining initialisation window 
03C0:  MOVLW  02
03C1:  BCF    03.5
03C2:  MOVWF  37
03C3:  MOVLW  F8
03C4:  MOVWF  38
03C5:  CALL   39E
03C6:  DECFSZ 37,F
03C7:  GOTO   3C3
....................     output_float(ONE_WIRE_PIN); 
03C8:  BSF    20.1
03C9:  MOVF   20,W
03CA:  BSF    03.5
03CB:  MOVWF  07
03CC:  BCF    03.5
03CD:  RETURN
.................... } 
....................  
....................  
.................... /* 
....................  * onewire_write(int8 data) 
....................  * Arguments: a byte of data. 
....................  * Description: writes a byte of data to the device. 
....................  */ 
.................... void onewire_write(int8 data) { 
....................     int8 count; 
....................  
....................     for(count = 0; count < 8; ++count) { 
03CE:  CLRF   38
03CF:  MOVF   38,W
03D0:  SUBLW  07
03D1:  BTFSS  03.0
03D2:  GOTO   3F5
....................         output_low(ONE_WIRE_PIN); 
03D3:  BCF    20.1
03D4:  MOVF   20,W
03D5:  BSF    03.5
03D6:  MOVWF  07
03D7:  BCF    03.5
03D8:  BCF    07.1
....................         delay_us(2);                // pull 1-wire low to initiate write time-slot. 
03D9:  GOTO   3DA
03DA:  GOTO   3DB
....................         output_bit(ONE_WIRE_PIN, shift_right(&data, 1, 0)); // set output bit on 1-wire 
03DB:  BCF    03.0
03DC:  RRF    37,F
03DD:  BTFSC  03.0
03DE:  GOTO   3E1
03DF:  BCF    07.1
03E0:  GOTO   3E2
03E1:  BSF    07.1
03E2:  BCF    20.1
03E3:  MOVF   20,W
03E4:  BSF    03.5
03E5:  MOVWF  07
....................         delay_us(60);               // wait until end of write slot. 
03E6:  MOVLW  27
03E7:  MOVWF  77
03E8:  DECFSZ 77,F
03E9:  GOTO   3E8
03EA:  GOTO   3EB
....................         output_float(ONE_WIRE_PIN); // set 1-wire high again, 
03EB:  BCF    03.5
03EC:  BSF    20.1
03ED:  MOVF   20,W
03EE:  BSF    03.5
03EF:  MOVWF  07
....................         delay_us(2);                // for more than 1us minimum. 
03F0:  GOTO   3F1
03F1:  GOTO   3F2
03F2:  BCF    03.5
03F3:  INCF   38,F
03F4:  GOTO   3CF
....................     } 
03F5:  RETURN
.................... } 
....................  
.................... /* 
....................  * onewire_read() 
....................  * Description: reads and returns a byte of data from the device. 
....................  */ 
.................... int onewire_read() { 
....................     int count, data; 
....................  
....................     for(count = 0; count < 8; ++count) { 
03F6:  CLRF   37
03F7:  MOVF   37,W
03F8:  SUBLW  07
03F9:  BTFSS  03.0
03FA:  GOTO   420
....................         output_low(ONE_WIRE_PIN); 
03FB:  BCF    20.1
03FC:  MOVF   20,W
03FD:  BSF    03.5
03FE:  MOVWF  07
03FF:  BCF    03.5
0400:  BCF    07.1
....................         delay_us(2);                // pull 1-wire low to initiate read time-slot. 
0401:  GOTO   402
0402:  GOTO   403
....................         output_float(ONE_WIRE_PIN); // now let 1-wire float high, 
0403:  BSF    20.1
0404:  MOVF   20,W
0405:  BSF    03.5
0406:  MOVWF  07
....................         delay_us(8);                // let device state stabilise, 
0407:  MOVLW  04
0408:  MOVWF  77
0409:  DECFSZ 77,F
040A:  GOTO   409
040B:  GOTO   40C
040C:  NOP
....................         shift_right(&data, 1, input(ONE_WIRE_PIN)); // and load result. 
040D:  BCF    03.5
040E:  BSF    20.1
040F:  MOVF   20,W
0410:  BSF    03.5
0411:  MOVWF  07
0412:  BCF    03.5
0413:  BTFSC  07.1
0414:  GOTO   417
0415:  BCF    03.0
0416:  GOTO   418
0417:  BSF    03.0
0418:  RRF    38,F
....................         delay_us(120);              // wait until end of read slot. 
0419:  MOVLW  4F
041A:  MOVWF  77
041B:  DECFSZ 77,F
041C:  GOTO   41B
041D:  GOTO   41E
041E:  INCF   37,F
041F:  GOTO   3F7
....................     } 
....................     return data; 
0420:  MOVF   38,W
0421:  MOVWF  78
0422:  RETURN
.................... }  
....................  
.................... #endif /*ONE_WIRE_C*/ 
....................  
.................... #include <display.c> 
.................... #ifndef DISPLAY_C 
.................... #define DISPLAY_C 
.................... #define LED1 PIN_A0 
.................... #define LED2 PIN_A1 
.................... #define LED3 PIN_A2 
.................... #define LED4 PIN_A3 
.................... #define LED5 PIN_A4 
.................... #define LED6 PIN_A5 
....................  
.................... #define MODE PIN_B0 
.................... #define EDIT PIN_C0 
.................... #define INC PIN_C2 
.................... #define DEC PIN_C3 
.................... //                      0    1    2    3    4    5    6    7    8    9   0.   1.   2.   3.   4.   5.   6.   7.   8.   9.   C    do C off   
.................... byte const DIGITS[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0xbf,0x86,0xdb,0xcf,0xe6,0xed,0xfd,0x87,0xff,0xef,0x39,0x63,0x00,}; 
.................... int clock_mode=0; 
.................... int h_alarm=2, m_alarm=5; 
.................... int h=2,m=4,s=45; 
.................... int h_edit=0,m_edit=0; 
.................... byte day=5,mth=4,yea=15,dow=2; 
.................... byte set_alarm=1; 
.................... byte temp; 
.................... void off_on_led(byte pin); 
.................... void display_led(byte digit, byte pin); 
.................... void display_time_alarm_on(byte h,byte m, byte s); 
.................... void display_time(byte h,byte m, byte s); 
.................... void display_tem(byte i); 
.................... void display_edit_h_alarm_off(byte halarm, byte malarm, byte salarm); 
.................... void display_edit_m_alarm_off(byte halarm, byte malarm, byte salarm); 
.................... void display_edit_h_alarm_on(byte halarm, byte malarm, byte salarm); 
.................... void display_edit_m_alarm_on(byte halarm, byte malarm, byte salarm); 
.................... void delayled_on_edit(int time); 
.................... void delayled_on(int time); 
.................... void delayled_off(int time); 
.................... void clock_alarm(); 
.................... void edit_time(); 
....................  
.................... void off_on_led(byte pin) { 
....................    output_low(pin); 
*
00FB:  MOVF   40,W
00FC:  MOVWF  41
00FD:  CLRF   42
00FE:  CLRF   44
00FF:  CLRF   43
0100:  CALL   0D0
0101:  MOVF   40,W
0102:  MOVWF  41
0103:  CLRF   42
0104:  CLRF   44
0105:  MOVLW  80
0106:  MOVWF  43
0107:  CALL   0D0
....................    delay_ms(1); 
0108:  MOVLW  01
0109:  MOVWF  41
....................    output_high(pin); 
*
011D:  MOVF   40,W
011E:  MOVWF  41
011F:  MOVLW  01
0120:  MOVWF  42
0121:  CLRF   44
0122:  CLRF   43
0123:  CALL   0D0
0124:  MOVF   40,W
0125:  MOVWF  41
0126:  CLRF   42
0127:  CLRF   44
0128:  MOVLW  80
0129:  MOVWF  43
012A:  CALL   0D0
.................... } 
....................  
.................... void display_led(byte digit, byte pin) { 
....................    output_d(DIGITS[digit] ^ 0xff); 
*
00F0:  MOVF   3E,W
00F1:  CALL   004
00F2:  XORLW  FF
00F3:  MOVWF  40
00F4:  BSF    03.5
00F5:  CLRF   08
00F6:  BCF    03.5
00F7:  MOVF   40,W
00F8:  MOVWF  08
....................    off_on_led(pin); 
00F9:  MOVF   3F,W
00FA:  MOVWF  40
*
012B:  RETURN
.................... } 
....................  
.................... void display_time_alarm_on(byte h,byte m, byte s) {    
....................    display_led(s % 10+10, LED1); 
*
01CA:  MOVF   3C,W
01CB:  MOVWF  40
01CC:  MOVLW  0A
01CD:  MOVWF  41
01CE:  CALL   15B
01CF:  MOVLW  0A
01D0:  ADDWF  77,W
01D1:  MOVWF  3D
01D2:  MOVWF  3E
01D3:  MOVLW  28
01D4:  MOVWF  3F
01D5:  CALL   0F0
....................    display_led(s / 10, LED2);    
01D6:  MOVF   3C,W
01D7:  MOVWF  40
01D8:  MOVLW  0A
01D9:  MOVWF  41
01DA:  CALL   15B
01DB:  MOVF   78,W
01DC:  MOVWF  3D
01DD:  MOVWF  3E
01DE:  MOVLW  29
01DF:  MOVWF  3F
01E0:  CALL   0F0
....................    display_led(m % 10+10, LED3); 
01E1:  MOVF   3B,W
01E2:  MOVWF  40
01E3:  MOVLW  0A
01E4:  MOVWF  41
01E5:  CALL   15B
01E6:  MOVLW  0A
01E7:  ADDWF  77,W
01E8:  MOVWF  3D
01E9:  MOVWF  3E
01EA:  MOVLW  2A
01EB:  MOVWF  3F
01EC:  CALL   0F0
....................    display_led(m / 10, LED4);    
01ED:  MOVF   3B,W
01EE:  MOVWF  40
01EF:  MOVLW  0A
01F0:  MOVWF  41
01F1:  CALL   15B
01F2:  MOVF   78,W
01F3:  MOVWF  3D
01F4:  MOVWF  3E
01F5:  MOVLW  2B
01F6:  MOVWF  3F
01F7:  CALL   0F0
....................    display_led(h % 10+10, LED5); 
01F8:  MOVF   3A,W
01F9:  MOVWF  40
01FA:  MOVLW  0A
01FB:  MOVWF  41
01FC:  CALL   15B
01FD:  MOVLW  0A
01FE:  ADDWF  77,W
01FF:  MOVWF  3D
0200:  MOVWF  3E
0201:  MOVLW  2C
0202:  MOVWF  3F
0203:  CALL   0F0
....................    display_led(h / 10, LED6); 
0204:  MOVF   3A,W
0205:  MOVWF  40
0206:  MOVLW  0A
0207:  MOVWF  41
0208:  CALL   15B
0209:  MOVF   78,W
020A:  MOVWF  3D
020B:  MOVWF  3E
020C:  MOVLW  2D
020D:  MOVWF  3F
020E:  CALL   0F0
020F:  RETURN
.................... } 
.................... void display_time(byte h,byte m, byte s) {    
....................    display_led(s % 10, LED1); 
*
0187:  MOVF   3C,W
0188:  MOVWF  40
0189:  MOVLW  0A
018A:  MOVWF  41
018B:  CALL   15B
018C:  MOVF   77,W
018D:  MOVWF  3D
018E:  MOVWF  3E
018F:  MOVLW  28
0190:  MOVWF  3F
0191:  CALL   0F0
....................    display_led(s / 10, LED2);    
0192:  MOVF   3C,W
0193:  MOVWF  40
0194:  MOVLW  0A
0195:  MOVWF  41
0196:  CALL   15B
0197:  MOVF   78,W
0198:  MOVWF  3D
0199:  MOVWF  3E
019A:  MOVLW  29
019B:  MOVWF  3F
019C:  CALL   0F0
....................    display_led(m % 10, LED3); 
019D:  MOVF   3B,W
019E:  MOVWF  40
019F:  MOVLW  0A
01A0:  MOVWF  41
01A1:  CALL   15B
01A2:  MOVF   77,W
01A3:  MOVWF  3D
01A4:  MOVWF  3E
01A5:  MOVLW  2A
01A6:  MOVWF  3F
01A7:  CALL   0F0
....................    display_led(m / 10, LED4);    
01A8:  MOVF   3B,W
01A9:  MOVWF  40
01AA:  MOVLW  0A
01AB:  MOVWF  41
01AC:  CALL   15B
01AD:  MOVF   78,W
01AE:  MOVWF  3D
01AF:  MOVWF  3E
01B0:  MOVLW  2B
01B1:  MOVWF  3F
01B2:  CALL   0F0
....................    display_led(h % 10, LED5); 
01B3:  MOVF   3A,W
01B4:  MOVWF  40
01B5:  MOVLW  0A
01B6:  MOVWF  41
01B7:  CALL   15B
01B8:  MOVF   77,W
01B9:  MOVWF  3D
01BA:  MOVWF  3E
01BB:  MOVLW  2C
01BC:  MOVWF  3F
01BD:  CALL   0F0
....................    display_led(h / 10, LED6); 
01BE:  MOVF   3A,W
01BF:  MOVWF  40
01C0:  MOVLW  0A
01C1:  MOVWF  41
01C2:  CALL   15B
01C3:  MOVF   78,W
01C4:  MOVWF  3D
01C5:  MOVWF  3E
01C6:  MOVLW  2D
01C7:  MOVWF  3F
01C8:  CALL   0F0
01C9:  RETURN
.................... } 
....................  
.................... void display_tem(byte i){     
....................    display_led(i % 10, LED3); 
*
0430:  MOVF   37,W
0431:  MOVWF  40
0432:  MOVLW  0A
0433:  MOVWF  41
0434:  CALL   15B
0435:  MOVF   77,W
0436:  MOVWF  38
0437:  MOVWF  3E
0438:  MOVLW  2A
0439:  MOVWF  3F
043A:  CALL   0F0
....................    display_led(i / 10, LED4);  
043B:  MOVF   37,W
043C:  MOVWF  40
043D:  MOVLW  0A
043E:  MOVWF  41
043F:  CALL   15B
0440:  MOVF   78,W
0441:  MOVWF  38
0442:  MOVWF  3E
0443:  MOVLW  2B
0444:  MOVWF  3F
0445:  CALL   0F0
....................    
....................    display_led(21, LED2); //' 
0446:  MOVLW  15
0447:  MOVWF  3E
0448:  MOVLW  29
0449:  MOVWF  3F
044A:  CALL   0F0
....................    display_led(20, LED1); //C 
044B:  MOVLW  14
044C:  MOVWF  3E
044D:  MOVLW  28
044E:  MOVWF  3F
044F:  CALL   0F0
.................... } 
....................  
.................... void display_edit_h_alarm_off(byte halarm, byte malarm, byte salarm){ 
*
04C2:  CLRF   35
....................    int i=0; 
....................    for(i=0;i<30;i++){ 
04C3:  CLRF   35
04C4:  MOVF   35,W
04C5:  SUBLW  1D
04C6:  BTFSS  03.0
04C7:  GOTO   4F2
....................       display_led(0, LED1); 
04C8:  CLRF   3E
04C9:  MOVLW  28
04CA:  MOVWF  3F
04CB:  CALL   0F0
....................       display_led(0, LED2);    
04CC:  CLRF   3E
04CD:  MOVLW  29
04CE:  MOVWF  3F
04CF:  CALL   0F0
....................       display_led(malarm % 10, LED3); 
04D0:  MOVF   33,W
04D1:  MOVWF  40
04D2:  MOVLW  0A
04D3:  MOVWF  41
04D4:  CALL   15B
04D5:  MOVF   77,W
04D6:  MOVWF  36
04D7:  MOVWF  3E
04D8:  MOVLW  2A
04D9:  MOVWF  3F
04DA:  CALL   0F0
....................       display_led(malarm / 10, LED4);    
04DB:  MOVF   33,W
04DC:  MOVWF  40
04DD:  MOVLW  0A
04DE:  MOVWF  41
04DF:  CALL   15B
04E0:  MOVF   78,W
04E1:  MOVWF  36
04E2:  MOVWF  3E
04E3:  MOVLW  2B
04E4:  MOVWF  3F
04E5:  CALL   0F0
....................       display_led(22, LED5); 
04E6:  MOVLW  16
04E7:  MOVWF  3E
04E8:  MOVLW  2C
04E9:  MOVWF  3F
04EA:  CALL   0F0
....................       display_led(22, LED6); 
04EB:  MOVLW  16
04EC:  MOVWF  3E
04ED:  MOVLW  2D
04EE:  MOVWF  3F
04EF:  CALL   0F0
04F0:  INCF   35,F
04F1:  GOTO   4C4
....................    } 
....................    for(i=0;i<30;i++) 
04F2:  CLRF   35
04F3:  MOVF   35,W
04F4:  SUBLW  1D
04F5:  BTFSS  03.0
04F6:  GOTO   500
....................       display_time(halarm, malarm, salarm); 
04F7:  MOVF   32,W
04F8:  MOVWF  3A
04F9:  MOVF   33,W
04FA:  MOVWF  3B
04FB:  MOVF   34,W
04FC:  MOVWF  3C
04FD:  CALL   187
04FE:  INCF   35,F
04FF:  GOTO   4F3
0500:  RETURN
.................... } 
.................... void display_edit_m_alarm_off(byte halarm, byte malarm, byte salarm){ 
0501:  CLRF   35
....................    int i=0; 
....................    for(i=0;i<30;i++){ 
0502:  CLRF   35
0503:  MOVF   35,W
0504:  SUBLW  1D
0505:  BTFSS  03.0
0506:  GOTO   531
....................       display_led(0, LED1); 
0507:  CLRF   3E
0508:  MOVLW  28
0509:  MOVWF  3F
050A:  CALL   0F0
....................       display_led(0, LED2);    
050B:  CLRF   3E
050C:  MOVLW  29
050D:  MOVWF  3F
050E:  CALL   0F0
....................       display_led(22, LED3); 
050F:  MOVLW  16
0510:  MOVWF  3E
0511:  MOVLW  2A
0512:  MOVWF  3F
0513:  CALL   0F0
....................       display_led(22, LED4);    
0514:  MOVLW  16
0515:  MOVWF  3E
0516:  MOVLW  2B
0517:  MOVWF  3F
0518:  CALL   0F0
....................       display_led(halarm % 10, LED5); 
0519:  MOVF   32,W
051A:  MOVWF  40
051B:  MOVLW  0A
051C:  MOVWF  41
051D:  CALL   15B
051E:  MOVF   77,W
051F:  MOVWF  36
0520:  MOVWF  3E
0521:  MOVLW  2C
0522:  MOVWF  3F
0523:  CALL   0F0
....................       display_led(halarm / 10, LED6); 
0524:  MOVF   32,W
0525:  MOVWF  40
0526:  MOVLW  0A
0527:  MOVWF  41
0528:  CALL   15B
0529:  MOVF   78,W
052A:  MOVWF  36
052B:  MOVWF  3E
052C:  MOVLW  2D
052D:  MOVWF  3F
052E:  CALL   0F0
052F:  INCF   35,F
0530:  GOTO   503
....................    } 
....................    for(i=0;i<30;i++)    
0531:  CLRF   35
0532:  MOVF   35,W
0533:  SUBLW  1D
0534:  BTFSS  03.0
0535:  GOTO   53F
....................       display_time(halarm, malarm, salarm); 
0536:  MOVF   32,W
0537:  MOVWF  3A
0538:  MOVF   33,W
0539:  MOVWF  3B
053A:  MOVF   34,W
053B:  MOVWF  3C
053C:  CALL   187
053D:  INCF   35,F
053E:  GOTO   532
053F:  RETURN
.................... } 
.................... void display_edit_h_alarm_on(byte halarm, byte malarm, byte salarm){ 
0540:  CLRF   35
....................    int i=0; 
....................    for(i=0;i<30;i++){ 
0541:  CLRF   35
0542:  MOVF   35,W
0543:  SUBLW  1D
0544:  BTFSS  03.0
0545:  GOTO   572
....................       display_led(10, LED1); 
0546:  MOVLW  0A
0547:  MOVWF  3E
0548:  MOVLW  28
0549:  MOVWF  3F
054A:  CALL   0F0
....................       display_led(0, LED2);    
054B:  CLRF   3E
054C:  MOVLW  29
054D:  MOVWF  3F
054E:  CALL   0F0
....................       display_led(malarm % 10+10, LED3); 
054F:  MOVF   33,W
0550:  MOVWF  40
0551:  MOVLW  0A
0552:  MOVWF  41
0553:  CALL   15B
0554:  MOVLW  0A
0555:  ADDWF  77,W
0556:  MOVWF  36
0557:  MOVWF  3E
0558:  MOVLW  2A
0559:  MOVWF  3F
055A:  CALL   0F0
....................       display_led(malarm / 10, LED4);    
055B:  MOVF   33,W
055C:  MOVWF  40
055D:  MOVLW  0A
055E:  MOVWF  41
055F:  CALL   15B
0560:  MOVF   78,W
0561:  MOVWF  36
0562:  MOVWF  3E
0563:  MOVLW  2B
0564:  MOVWF  3F
0565:  CALL   0F0
....................       display_led(22, LED5); 
0566:  MOVLW  16
0567:  MOVWF  3E
0568:  MOVLW  2C
0569:  MOVWF  3F
056A:  CALL   0F0
....................       display_led(22, LED6); 
056B:  MOVLW  16
056C:  MOVWF  3E
056D:  MOVLW  2D
056E:  MOVWF  3F
056F:  CALL   0F0
0570:  INCF   35,F
0571:  GOTO   542
....................    }       
....................    for(i=0;i<30;i++) 
0572:  CLRF   35
0573:  MOVF   35,W
0574:  SUBLW  1D
0575:  BTFSS  03.0
0576:  GOTO   580
....................       display_time_alarm_on(halarm, malarm, salarm); 
0577:  MOVF   32,W
0578:  MOVWF  3A
0579:  MOVF   33,W
057A:  MOVWF  3B
057B:  MOVF   34,W
057C:  MOVWF  3C
057D:  CALL   1CA
057E:  INCF   35,F
057F:  GOTO   573
0580:  RETURN
.................... } 
.................... void display_edit_m_alarm_on(byte halarm, byte malarm, byte salarm){ 
0581:  CLRF   35
....................    int i=0; 
....................    for(i=0;i<30;i++){ 
0582:  CLRF   35
0583:  MOVF   35,W
0584:  SUBLW  1D
0585:  BTFSS  03.0
0586:  GOTO   5B3
....................       display_led(10, LED1); 
0587:  MOVLW  0A
0588:  MOVWF  3E
0589:  MOVLW  28
058A:  MOVWF  3F
058B:  CALL   0F0
....................       display_led(0, LED2);    
058C:  CLRF   3E
058D:  MOVLW  29
058E:  MOVWF  3F
058F:  CALL   0F0
....................       display_led(22, LED3); 
0590:  MOVLW  16
0591:  MOVWF  3E
0592:  MOVLW  2A
0593:  MOVWF  3F
0594:  CALL   0F0
....................       display_led(22, LED4);    
0595:  MOVLW  16
0596:  MOVWF  3E
0597:  MOVLW  2B
0598:  MOVWF  3F
0599:  CALL   0F0
....................       display_led(halarm % 10+10, LED5); 
059A:  MOVF   32,W
059B:  MOVWF  40
059C:  MOVLW  0A
059D:  MOVWF  41
059E:  CALL   15B
059F:  MOVLW  0A
05A0:  ADDWF  77,W
05A1:  MOVWF  36
05A2:  MOVWF  3E
05A3:  MOVLW  2C
05A4:  MOVWF  3F
05A5:  CALL   0F0
....................       display_led(halarm / 10, LED6); 
05A6:  MOVF   32,W
05A7:  MOVWF  40
05A8:  MOVLW  0A
05A9:  MOVWF  41
05AA:  CALL   15B
05AB:  MOVF   78,W
05AC:  MOVWF  36
05AD:  MOVWF  3E
05AE:  MOVLW  2D
05AF:  MOVWF  3F
05B0:  CALL   0F0
05B1:  INCF   35,F
05B2:  GOTO   583
....................    } 
....................    for(i=0;i<30;i++)    
05B3:  CLRF   35
05B4:  MOVF   35,W
05B5:  SUBLW  1D
05B6:  BTFSS  03.0
05B7:  GOTO   5C1
....................       display_time_alarm_on(halarm, malarm, salarm); 
05B8:  MOVF   32,W
05B9:  MOVWF  3A
05BA:  MOVF   33,W
05BB:  MOVWF  3B
05BC:  MOVF   34,W
05BD:  MOVWF  3C
05BE:  CALL   1CA
05BF:  INCF   35,F
05C0:  GOTO   5B4
05C1:  RETURN
.................... } 
....................  
.................... void delayled_on_edit(int time){ 
*
0210:  CLRF   38
0211:  CLRF   39
....................    int i=0,j=0; 
....................    for(i=0;i<time;i++) 
0212:  CLRF   38
0213:  MOVF   37,W
0214:  SUBWF  38,W
0215:  BTFSC  03.0
0216:  GOTO   268
....................    for(j=0;j<30;j++) 
0217:  CLRF   39
0218:  MOVF   39,W
0219:  SUBLW  1D
021A:  BTFSS  03.0
021B:  GOTO   266
....................    if(set_alarm==0){ 
021C:  MOVF   2D,F
021D:  BTFSS  03.2
021E:  GOTO   242
....................       switch(clock_mode){ 
021F:  MOVLW  03
0220:  SUBWF  21,W
0221:  ADDLW  FC
0222:  BTFSC  03.0
0223:  GOTO   241
0224:  ADDLW  04
0225:  GOTO   269
....................          case 3: display_time(h_edit, m, 0); 
0226:  MOVF   27,W
0227:  MOVWF  3A
0228:  MOVF   25,W
0229:  MOVWF  3B
022A:  CLRF   3C
022B:  CALL   187
....................                  break; 
022C:  GOTO   241
....................          case 4: display_time(h_edit, m_edit, 0); 
022D:  MOVF   27,W
022E:  MOVWF  3A
022F:  MOVF   28,W
0230:  MOVWF  3B
0231:  CLRF   3C
0232:  CALL   187
....................                  break; 
0233:  GOTO   241
....................          case 5: display_time(h_alarm,m_alarm,0); 
0234:  MOVF   22,W
0235:  MOVWF  3A
0236:  MOVF   23,W
0237:  MOVWF  3B
0238:  CLRF   3C
0239:  CALL   187
....................                  break; 
023A:  GOTO   241
....................          case 6: display_time(h_alarm,m_alarm,0); 
023B:  MOVF   22,W
023C:  MOVWF  3A
023D:  MOVF   23,W
023E:  MOVWF  3B
023F:  CLRF   3C
0240:  CALL   187
....................                  break; 
....................       } 
....................    }else{ 
0241:  GOTO   264
....................       switch(clock_mode){ 
0242:  MOVLW  03
0243:  SUBWF  21,W
0244:  ADDLW  FC
0245:  BTFSC  03.0
0246:  GOTO   264
0247:  ADDLW  04
0248:  GOTO   271
....................          case 3: display_time_alarm_on(h_edit, m_edit, 0); 
0249:  MOVF   27,W
024A:  MOVWF  3A
024B:  MOVF   28,W
024C:  MOVWF  3B
024D:  CLRF   3C
024E:  CALL   1CA
....................                  break; 
024F:  GOTO   264
....................          case 4: display_time_alarm_on(h_edit, m_edit, 0); 
0250:  MOVF   27,W
0251:  MOVWF  3A
0252:  MOVF   28,W
0253:  MOVWF  3B
0254:  CLRF   3C
0255:  CALL   1CA
....................                  break;           
0256:  GOTO   264
....................          case 5: display_time_alarm_on(h_alarm,m_alarm,0); 
0257:  MOVF   22,W
0258:  MOVWF  3A
0259:  MOVF   23,W
025A:  MOVWF  3B
025B:  CLRF   3C
025C:  CALL   1CA
....................                  break; 
025D:  GOTO   264
....................          case 6: display_time_alarm_on(h_alarm,m_alarm,0); 
025E:  MOVF   22,W
025F:  MOVWF  3A
0260:  MOVF   23,W
0261:  MOVWF  3B
0262:  CLRF   3C
0263:  CALL   1CA
....................                  break; 
....................       }       
0264:  INCF   39,F
0265:  GOTO   218
0266:  INCF   38,F
0267:  GOTO   213
....................    } 
0268:  RETURN
.................... } 
.................... void delayled_on(int time){ 
*
05C2:  CLRF   31
....................    int i=0; 
....................    for(i=0;i<time;i++) 
05C3:  CLRF   31
05C4:  MOVF   30,W
05C5:  SUBWF  31,W
05C6:  BTFSC  03.0
05C7:  GOTO   630
....................    if(set_alarm==0){ 
05C8:  MOVF   2D,F
05C9:  BTFSS  03.2
05CA:  GOTO   5FD
....................       switch(clock_mode){ 
05CB:  MOVF   21,W
05CC:  ADDLW  F9
05CD:  BTFSC  03.0
05CE:  GOTO   5FC
05CF:  ADDLW  07
05D0:  GOTO   633
....................          case 0: display_time(h, m, s);                  
05D1:  MOVF   24,W
05D2:  MOVWF  3A
05D3:  MOVF   25,W
05D4:  MOVWF  3B
05D5:  MOVF   26,W
05D6:  MOVWF  3C
05D7:  CALL   187
....................                  break; 
05D8:  GOTO   5FC
....................          case 1: display_time(h_alarm, m_alarm, 0); 
05D9:  MOVF   22,W
05DA:  MOVWF  3A
05DB:  MOVF   23,W
05DC:  MOVWF  3B
05DD:  CLRF   3C
05DE:  CALL   187
....................                  break; 
05DF:  GOTO   5FC
....................          case 2: //display_tem(temp); 
....................                  break;                     
05E0:  GOTO   5FC
....................          case 3: display_edit_h_alarm_off(h_edit, m_edit, 0); 
05E1:  MOVF   27,W
05E2:  MOVWF  32
05E3:  MOVF   28,W
05E4:  MOVWF  33
05E5:  CLRF   34
05E6:  CALL   4C2
....................                  break; 
05E7:  GOTO   5FC
....................          case 4: display_edit_m_alarm_off(h_edit, m_edit, 0); 
05E8:  MOVF   27,W
05E9:  MOVWF  32
05EA:  MOVF   28,W
05EB:  MOVWF  33
05EC:  CLRF   34
05ED:  CALL   501
....................                  break;           
05EE:  GOTO   5FC
....................          case 5: display_edit_h_alarm_off(h_alarm,m_alarm,0); 
05EF:  MOVF   22,W
05F0:  MOVWF  32
05F1:  MOVF   23,W
05F2:  MOVWF  33
05F3:  CLRF   34
05F4:  CALL   4C2
....................                  break; 
05F5:  GOTO   5FC
....................          case 6: display_edit_m_alarm_off(h_alarm,m_alarm,0); 
05F6:  MOVF   22,W
05F7:  MOVWF  32
05F8:  MOVF   23,W
05F9:  MOVWF  33
05FA:  CLRF   34
05FB:  CALL   501
....................                  break; 
....................       } 
....................    } 
05FC:  GOTO   62E
....................       else{ 
....................       switch(clock_mode){ 
05FD:  MOVF   21,W
05FE:  ADDLW  F9
05FF:  BTFSC  03.0
0600:  GOTO   62E
0601:  ADDLW  07
0602:  GOTO   63E
....................          case 0: display_time_alarm_on(h, m, s);          
0603:  MOVF   24,W
0604:  MOVWF  3A
0605:  MOVF   25,W
0606:  MOVWF  3B
0607:  MOVF   26,W
0608:  MOVWF  3C
0609:  CALL   1CA
....................                  break; 
060A:  GOTO   62E
....................          case 1: display_time_alarm_on(h_alarm, m_alarm, 0); 
060B:  MOVF   22,W
060C:  MOVWF  3A
060D:  MOVF   23,W
060E:  MOVWF  3B
060F:  CLRF   3C
0610:  CALL   1CA
....................                  break; 
0611:  GOTO   62E
....................          case 2: //display_tem(temp); 
....................                  break;                     
0612:  GOTO   62E
....................          case 3: display_edit_h_alarm_on(h_edit, m_edit, 0); 
0613:  MOVF   27,W
0614:  MOVWF  32
0615:  MOVF   28,W
0616:  MOVWF  33
0617:  CLRF   34
0618:  CALL   540
....................                  break; 
0619:  GOTO   62E
....................          case 4: display_edit_m_alarm_on(h_edit, m_edit, 0); 
061A:  MOVF   27,W
061B:  MOVWF  32
061C:  MOVF   28,W
061D:  MOVWF  33
061E:  CLRF   34
061F:  CALL   581
....................                  break;           
0620:  GOTO   62E
....................          case 5: display_edit_h_alarm_on(h_alarm,m_alarm,0); 
0621:  MOVF   22,W
0622:  MOVWF  32
0623:  MOVF   23,W
0624:  MOVWF  33
0625:  CLRF   34
0626:  CALL   540
....................                  break; 
0627:  GOTO   62E
....................          case 6: display_edit_m_alarm_on(h_alarm,m_alarm,0); 
0628:  MOVF   22,W
0629:  MOVWF  32
062A:  MOVF   23,W
062B:  MOVWF  33
062C:  CLRF   34
062D:  CALL   581
....................                  break; 
....................       } 
062E:  INCF   31,F
062F:  GOTO   5C4
....................        
....................       } 
0630:  BCF    0A.3
0631:  BCF    0A.4
0632:  GOTO   6FE (RETURN)
.................... } 
....................  
.................... void delayled_off(int time){ 
*
012C:  CLRF   38
012D:  CLRF   39
....................    int i=0,j=0; 
....................    for(i=0;i<time;i++) 
012E:  CLRF   38
012F:  MOVF   37,W
0130:  SUBWF  38,W
0131:  BTFSC  03.0
0132:  GOTO   15A
....................       for(j=0;j<30;j++){   
0133:  CLRF   39
0134:  MOVF   39,W
0135:  SUBLW  1D
0136:  BTFSS  03.0
0137:  GOTO   158
....................          display_led(22, LED1); 
0138:  MOVLW  16
0139:  MOVWF  3E
013A:  MOVLW  28
013B:  MOVWF  3F
013C:  CALL   0F0
....................          display_led(22, LED2);    
013D:  MOVLW  16
013E:  MOVWF  3E
013F:  MOVLW  29
0140:  MOVWF  3F
0141:  CALL   0F0
....................          display_led(22, LED3); 
0142:  MOVLW  16
0143:  MOVWF  3E
0144:  MOVLW  2A
0145:  MOVWF  3F
0146:  CALL   0F0
....................          display_led(22, LED4);    
0147:  MOVLW  16
0148:  MOVWF  3E
0149:  MOVLW  2B
014A:  MOVWF  3F
014B:  CALL   0F0
....................          display_led(22, LED5); 
014C:  MOVLW  16
014D:  MOVWF  3E
014E:  MOVLW  2C
014F:  MOVWF  3F
0150:  CALL   0F0
....................          display_led(22, LED6); 
0151:  MOVLW  16
0152:  MOVWF  3E
0153:  MOVLW  2D
0154:  MOVWF  3F
0155:  CALL   0F0
0156:  INCF   39,F
0157:  GOTO   134
0158:  INCF   38,F
0159:  GOTO   12F
....................       } 
015A:  RETURN
.................... } 
.................... void clock_alarm(){ 
*
0477:  CLRF   30
....................    int i=0;    
....................    delayled_off(1); 
0478:  MOVLW  01
0479:  MOVWF  37
047A:  CALL   12C
....................   while(s<30){  
047B:  MOVF   26,W
047C:  SUBLW  1D
047D:  BTFSS  03.0
047E:  GOTO   4BF
....................       rtc_get_time(h, m, s); 
.................... //      printf("second %d ",s); 
....................       for(i=0;i<30;i++) 
*
049A:  CLRF   30
049B:  MOVF   30,W
049C:  SUBLW  1D
049D:  BTFSS  03.0
049E:  GOTO   4A8
....................       display_time_alarm_on(h, m, s); 
049F:  MOVF   24,W
04A0:  MOVWF  3A
04A1:  MOVF   25,W
04A2:  MOVWF  3B
04A3:  MOVF   26,W
04A4:  MOVWF  3C
04A5:  CALL   1CA
04A6:  INCF   30,F
04A7:  GOTO   49B
....................       delayled_off(1); 
04A8:  MOVLW  01
04A9:  MOVWF  37
04AA:  CALL   12C
....................       if(!input(MODE)){ 
04AB:  BSF    03.5
04AC:  BSF    06.0
04AD:  BCF    03.5
04AE:  BTFSC  06.0
04AF:  GOTO   4BE
....................          while(!input(MODE)){ 
04B0:  BSF    03.5
04B1:  BSF    06.0
04B2:  BCF    03.5
04B3:  BTFSC  06.0
04B4:  GOTO   4BD
....................             display_time_alarm_on(h, m, s); 
04B5:  MOVF   24,W
04B6:  MOVWF  3A
04B7:  MOVF   25,W
04B8:  MOVWF  3B
04B9:  MOVF   26,W
04BA:  MOVWF  3C
04BB:  CALL   1CA
04BC:  GOTO   4B0
....................          } 
....................          break; 
04BD:  GOTO   4BF
....................       }       
04BE:  GOTO   47B
....................    } 
04BF:  BCF    0A.3
04C0:  BCF    0A.4
04C1:  GOTO   6FB (RETURN)
.................... } 
.................... void edit_time(){ 
....................       if(!input(MODE)){ 
*
0279:  BSF    03.5
027A:  BSF    06.0
027B:  BCF    03.5
027C:  BTFSC  06.0
027D:  GOTO   28E
....................          while(!input(MODE)){ 
027E:  BSF    03.5
027F:  BSF    06.0
0280:  BCF    03.5
0281:  BTFSC  06.0
0282:  GOTO   287
....................             delayled_off(1); 
0283:  MOVLW  01
0284:  MOVWF  37
0285:  CALL   12C
0286:  GOTO   27E
....................          } 
....................          if(clock_mode>=2) clock_mode=0; 
0287:  MOVF   21,W
0288:  SUBLW  01
0289:  BTFSC  03.0
028A:  GOTO   28D
028B:  CLRF   21
028C:  GOTO   28E
....................          else clock_mode++;         
028D:  INCF   21,F
....................       } 
....................        
....................       if(!input(EDIT)){ 
028E:  BSF    20.0
028F:  MOVF   20,W
0290:  BSF    03.5
0291:  MOVWF  07
0292:  BCF    03.5
0293:  BTFSC  07.0
0294:  GOTO   30F
....................          while(!input(EDIT)){ 
0295:  BSF    20.0
0296:  MOVF   20,W
0297:  BSF    03.5
0298:  MOVWF  07
0299:  BCF    03.5
029A:  BTFSC  07.0
029B:  GOTO   2A0
....................             delayled_off(1); 
029C:  MOVLW  01
029D:  MOVWF  37
029E:  CALL   12C
029F:  GOTO   295
....................             //printf("point 1\n"); 
....................          } 
....................          switch(clock_mode){ 
02A0:  MOVF   21,W
02A1:  ADDLW  F9
02A2:  BTFSC  03.0
02A3:  GOTO   30F
02A4:  ADDLW  07
02A5:  GOTO   393
....................             case 6: clock_mode=1;                     
02A6:  MOVLW  01
02A7:  MOVWF  21
....................                     break; 
02A8:  GOTO   30F
....................             case 5: clock_mode=6;                     
02A9:  MOVLW  06
02AA:  MOVWF  21
....................                     break; 
02AB:  GOTO   30F
....................             case 4: clock_mode=0; 
02AC:  CLRF   21
....................                     rtc_set_datetime(day,mth,yea,dow,h_edit,m_edit); 
02AD:  MOVF   29,W
02AE:  MOVWF  37
02AF:  MOVF   2A,W
02B0:  MOVWF  38
02B1:  MOVF   2B,W
02B2:  MOVWF  39
02B3:  MOVF   2C,W
02B4:  MOVWF  3A
02B5:  MOVF   27,W
02B6:  MOVWF  3B
02B7:  MOVF   28,W
02B8:  MOVWF  3C
....................                     h=h_edit; 
*
02FE:  MOVF   27,W
02FF:  MOVWF  24
....................                     m=m_edit; 
0300:  MOVF   28,W
0301:  MOVWF  25
....................                     break; 
0302:  GOTO   30F
....................             case 3: clock_mode=4;                     
0303:  MOVLW  04
0304:  MOVWF  21
....................                     break; 
0305:  GOTO   30F
....................             case 1: clock_mode=5; 
0306:  MOVLW  05
0307:  MOVWF  21
....................                     break; 
0308:  GOTO   30F
....................             case 0: clock_mode=3; 
0309:  MOVLW  03
030A:  MOVWF  21
....................                     h_edit=h; 
030B:  MOVF   24,W
030C:  MOVWF  27
....................                     m_edit=m; 
030D:  MOVF   25,W
030E:  MOVWF  28
....................                     break;          
....................          } 
.................... //         printf("point 1\n"); 
.................... //         delayled_on(1); 
....................       } 
....................        
....................       if(!input(INC)){          
030F:  BSF    20.2
0310:  MOVF   20,W
0311:  BSF    03.5
0312:  MOVWF  07
0313:  BCF    03.5
0314:  BTFSC  07.2
0315:  GOTO   34D
....................          while(!input(INC)){ 
0316:  BSF    20.2
0317:  MOVF   20,W
0318:  BSF    03.5
0319:  MOVWF  07
031A:  BCF    03.5
031B:  BTFSC  07.2
031C:  GOTO   34D
....................             delayled_on_edit(1); 
031D:  MOVLW  01
031E:  MOVWF  37
031F:  CALL   210
....................             if(clock_mode==3){ 
0320:  MOVF   21,W
0321:  SUBLW  03
0322:  BTFSS  03.2
0323:  GOTO   32A
....................                h_edit++; 
0324:  INCF   27,F
....................                if(h_edit>23)h_edit=0;                
0325:  MOVF   27,W
0326:  SUBLW  17
0327:  BTFSS  03.0
0328:  CLRF   27
....................             } 
0329:  GOTO   34C
....................             else if(clock_mode==4){ 
032A:  MOVF   21,W
032B:  SUBLW  04
032C:  BTFSS  03.2
032D:  GOTO   334
....................                m_edit++; 
032E:  INCF   28,F
....................                if(m_edit>59) m_edit=0;                 
032F:  MOVF   28,W
0330:  SUBLW  3B
0331:  BTFSS  03.0
0332:  CLRF   28
....................             }     
0333:  GOTO   34C
....................             else if(clock_mode==1) set_alarm=1; 
0334:  DECFSZ 21,W
0335:  GOTO   339
0336:  MOVLW  01
0337:  MOVWF  2D
0338:  GOTO   34C
....................             else if(clock_mode==5){ 
0339:  MOVF   21,W
033A:  SUBLW  05
033B:  BTFSS  03.2
033C:  GOTO   343
....................                h_alarm++; 
033D:  INCF   22,F
....................                if(h_alarm>23) h_alarm=0; 
033E:  MOVF   22,W
033F:  SUBLW  17
0340:  BTFSS  03.0
0341:  CLRF   22
....................             } 
0342:  GOTO   34C
....................             else if(clock_mode==6){ 
0343:  MOVF   21,W
0344:  SUBLW  06
0345:  BTFSS  03.2
0346:  GOTO   34C
....................                m_alarm++; 
0347:  INCF   23,F
....................                if(m_alarm>59) m_alarm=0; 
0348:  MOVF   23,W
0349:  SUBLW  3B
034A:  BTFSS  03.0
034B:  CLRF   23
....................             }  
034C:  GOTO   316
....................              
....................          } 
....................       } 
....................        
....................       if(!input(DEC)){          
034D:  BSF    20.3
034E:  MOVF   20,W
034F:  BSF    03.5
0350:  MOVWF  07
0351:  BCF    03.5
0352:  BTFSC  07.3
0353:  GOTO   392
....................          while(!input(DEC)){ 
0354:  BSF    20.3
0355:  MOVF   20,W
0356:  BSF    03.5
0357:  MOVWF  07
0358:  BCF    03.5
0359:  BTFSC  07.3
035A:  GOTO   392
....................             delayled_on_edit(1);             
035B:  MOVLW  01
035C:  MOVWF  37
035D:  CALL   210
....................             if(clock_mode==1) set_alarm=0; 
035E:  DECFSZ 21,W
035F:  GOTO   362
0360:  CLRF   2D
0361:  GOTO   391
....................             else if(clock_mode==3){            
0362:  MOVF   21,W
0363:  SUBLW  03
0364:  BTFSS  03.2
0365:  GOTO   36E
....................                 if(h_edit==0) h_edit=23; 
0366:  MOVF   27,F
0367:  BTFSS  03.2
0368:  GOTO   36C
0369:  MOVLW  17
036A:  MOVWF  27
036B:  GOTO   36D
....................                 else h_edit--;                
036C:  DECF   27,F
....................             } 
036D:  GOTO   391
....................             else if(clock_mode==4){            
036E:  MOVF   21,W
036F:  SUBLW  04
0370:  BTFSS  03.2
0371:  GOTO   37A
....................                 if(m_edit==0) m_edit=59;                   
0372:  MOVF   28,F
0373:  BTFSS  03.2
0374:  GOTO   378
0375:  MOVLW  3B
0376:  MOVWF  28
0377:  GOTO   379
....................                 else m_edit--; 
0378:  DECF   28,F
....................             } 
0379:  GOTO   391
....................             else if(clock_mode==5){            
037A:  MOVF   21,W
037B:  SUBLW  05
037C:  BTFSS  03.2
037D:  GOTO   386
....................                if(h_alarm==0) h_alarm=23; 
037E:  MOVF   22,F
037F:  BTFSS  03.2
0380:  GOTO   384
0381:  MOVLW  17
0382:  MOVWF  22
0383:  GOTO   385
....................                 else h_alarm--; 
0384:  DECF   22,F
....................             } 
0385:  GOTO   391
....................             else if(clock_mode==6){            
0386:  MOVF   21,W
0387:  SUBLW  06
0388:  BTFSS  03.2
0389:  GOTO   391
....................                if(m_alarm==0) m_alarm=59; 
038A:  MOVF   23,F
038B:  BTFSS  03.2
038C:  GOTO   390
038D:  MOVLW  3B
038E:  MOVWF  23
038F:  GOTO   391
....................                else m_alarm--;                
0390:  DECF   23,F
....................             }     
0391:  GOTO   354
....................          } 
....................       } 
0392:  RETURN
.................... } 
.................... #endif 
....................  
.................... int ds18b20_read(byte tem); 
.................... void ds18b20_configure(int8 TH, int8 TL, int8 config); 
....................  
.................... /* 
....................  * ds1820_read() 
....................  * Description: reads the ds18x20 device on the 1-wire bus and returns 
....................  *              the temperature 
....................  */ 
....................   
.................... int ds18b20_read(byte tem) { 
*
0423:  CLRF   31
....................     int8 busy=0, temp1, temp2; 
....................     signed int16 temp3; 
....................     int result; 
....................     onewire_reset();//1ms 
0424:  CALL   3AF
....................     onewire_write(0xCC);//512us            //Skip ROM, address all devices 
0425:  MOVLW  CC
0426:  MOVWF  37
0427:  CALL   3CE
....................     onewire_write(0x44);//512us //Start temperature conversion     
0428:  MOVLW  44
0429:  MOVWF  37
042A:  CALL   3CE
....................     while(busy == 0){ 
042B:  MOVF   31,F
042C:  BTFSS  03.2
042D:  GOTO   455
....................        display_tem(tem);//Wait while busy (bus is low) 
042E:  MOVF   30,W
042F:  MOVWF  37
....................        edit_time();         
*
0450:  CALL   279
....................        busy = onewire_read();                 
0451:  CALL   3F6
0452:  MOVF   78,W
0453:  MOVWF  31
0454:  GOTO   42B
....................     } 
....................     onewire_reset(); 
0455:  CALL   3AF
....................     onewire_write(0xCC);            //Skip ROM, address all devices 
0456:  MOVLW  CC
0457:  MOVWF  37
0458:  CALL   3CE
....................     onewire_write(0xBE);            //Read scratchpad 
0459:  MOVLW  BE
045A:  MOVWF  37
045B:  CALL   3CE
....................     temp1 = onewire_read();//1040us 
045C:  CALL   3F6
045D:  MOVF   78,W
045E:  MOVWF  32
....................     temp2 = onewire_read();     
045F:  CALL   3F6
0460:  MOVF   78,W
0461:  MOVWF  33
....................     temp3 = make16(temp2, temp1); 
0462:  MOVF   33,W
0463:  MOVWF  35
0464:  MOVF   32,W
0465:  MOVWF  34
....................  
....................     //result = (float) temp3 / 2.0;   //Calculation for DS18S20 with 0.5 deg C resolution 
....................     result = temp3 >> 4;    //Calculation for DS18B20 with 0.1 deg C resolution 
0466:  RRF    35,W
0467:  MOVWF  7A
0468:  RRF    34,W
0469:  MOVWF  79
046A:  RRF    7A,F
046B:  RRF    79,F
046C:  RRF    7A,F
046D:  RRF    79,F
046E:  RRF    7A,F
046F:  RRF    79,F
0470:  MOVF   79,W
0471:  MOVWF  36
....................     return(result); 
0472:  MOVF   36,W
0473:  MOVWF  78
0474:  BCF    0A.3
0475:  BCF    0A.4
0476:  GOTO   6EC (RETURN)
.................... } 
....................  
.................... /* 
....................  * ds1820_configure(int8 TH, int8 LH, int8 config) 
....................  * Description: writes configuration data to the DS18x20 device 
....................  * Arguments: alarm trigger high, alarm trigger low, configuration 
....................  */ 
....................  
.................... void ds18b20_configure(int8 TH, int8 TL, int8 config) { 
....................     onewire_reset(); 
....................     onewire_write(0xCC);            //Skip ROM, address all devices 
....................     onewire_write(0x4E);            //Write to scratchpad 
....................     onewire_write(TH); 
....................     onewire_write(TL); 
....................     onewire_write(config); 
.................... } 
....................  
.................... #endif /*DS1820_C*/ 
....................  
....................  
....................  
.................... void main() 
*
0649:  MOVF   03,W
064A:  ANDLW  1F
064B:  MOVWF  03
064C:  BSF    03.5
064D:  BSF    03.6
064E:  BCF    07.3
064F:  MOVLW  0C
0650:  BCF    03.6
0651:  MOVWF  19
0652:  MOVLW  A2
0653:  MOVWF  18
0654:  MOVLW  90
0655:  BCF    03.5
0656:  MOVWF  18
0657:  MOVLW  FF
0658:  MOVWF  20
0659:  CLRF   21
065A:  MOVLW  02
065B:  MOVWF  22
065C:  MOVLW  05
065D:  MOVWF  23
065E:  MOVLW  02
065F:  MOVWF  24
0660:  MOVLW  04
0661:  MOVWF  25
0662:  MOVLW  2D
0663:  MOVWF  26
0664:  CLRF   27
0665:  CLRF   28
0666:  MOVLW  05
0667:  MOVWF  29
0668:  MOVLW  04
0669:  MOVWF  2A
066A:  MOVLW  0F
066B:  MOVWF  2B
066C:  MOVLW  02
066D:  MOVWF  2C
066E:  MOVLW  01
066F:  MOVWF  2D
0670:  BSF    03.5
0671:  BSF    03.6
0672:  MOVF   09,W
0673:  ANDLW  C0
0674:  MOVWF  09
0675:  BCF    03.6
0676:  BCF    1F.4
0677:  BCF    1F.5
0678:  MOVLW  00
0679:  BSF    03.6
067A:  MOVWF  08
067B:  BCF    03.5
067C:  CLRF   07
067D:  CLRF   08
067E:  CLRF   09
067F:  BCF    03.7
0680:  BCF    03.6
0681:  CLRF   2F
.................... { 
....................    byte count=0; 
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD); 
0682:  BSF    03.5
0683:  BSF    03.6
0684:  MOVF   09,W
0685:  ANDLW  C0
0686:  MOVWF  09
0687:  BCF    03.6
0688:  BCF    1F.4
0689:  BCF    1F.5
068A:  MOVLW  00
068B:  BSF    03.6
068C:  MOVWF  08
....................    setup_adc(ADC_OFF); 
068D:  BCF    03.5
068E:  BCF    03.6
068F:  BCF    1F.0
....................    setup_spi(FALSE); 
0690:  CLRF   14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
0691:  BSF    03.5
0692:  MOVF   01,W
0693:  ANDLW  C7
0694:  IORLW  08
0695:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
0696:  BCF    03.5
0697:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
0698:  MOVLW  00
0699:  MOVWF  78
069A:  MOVWF  12
069B:  MOVLW  00
069C:  BSF    03.5
069D:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
069E:  BCF    03.5
069F:  BSF    03.6
06A0:  CLRF   07
06A1:  CLRF   08
06A2:  CLRF   09
....................    rtc_init();  
06A3:  BCF    03.6
06A4:  GOTO   074
.................... //   rtc_set_datetime(day,mth,yea,dow,h,m);       
....................     
....................   while(TRUE)  
....................   { 
....................       rtc_get_time(h, m, s);  
....................       rtc_get_date(day,mth,yea,dow); 
....................       edit_time();      
*
06E4:  CALL   279
....................  
....................       if(clock_mode==2){ 
06E5:  MOVF   21,W
06E6:  SUBLW  02
06E7:  BTFSS  03.2
06E8:  GOTO   6EE
....................          temp=ds18b20_read(temp); 
06E9:  MOVF   2E,W
06EA:  MOVWF  30
06EB:  GOTO   423
06EC:  MOVF   78,W
06ED:  MOVWF  2E
....................       } 
....................  
....................       if(set_alarm==1) 
06EE:  DECFSZ 2D,W
06EF:  GOTO   6FB
....................          if(h==h_alarm) 
06F0:  MOVF   22,W
06F1:  SUBWF  24,W
06F2:  BTFSS  03.2
06F3:  GOTO   6FB
....................            if(m==m_alarm) 
06F4:  MOVF   23,W
06F5:  SUBWF  25,W
06F6:  BTFSS  03.2
06F7:  GOTO   6FB
....................             if(s==0){ 
06F8:  MOVF   26,F
06F9:  BTFSC  03.2
....................                clock_alarm(); 
06FA:  GOTO   477
....................             }             
....................       delayled_on(1); 
06FB:  MOVLW  01
06FC:  MOVWF  30
06FD:  GOTO   5C2
06FE:  GOTO   6A5
.................... //      printf("day: %d, month: %d, year: %d, day of week: %d\n",day,mth,yea,dow);      
....................   } 
.................... } 
....................  
06FF:  SLEEP

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
